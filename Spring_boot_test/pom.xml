<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，
           这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- 项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成，
     如com.myCompany.app生成的相对路径为：/com/myCompany/app -->
    <!--    <groupId>org.example</groupId>-->
    <!-- 构件的标识符，它和group ID一起唯一标识一个构件。
    换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；
    在某个特定的group ID下，artifact ID也必须是唯一的。通常和项目名称保持统一 -->
    <artifactId>Spring_boot_test</artifactId>
    <!-- 项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，默认jar-->
    <packaging>jar</packaging>
    <!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
    <version>1.0-SNAPSHOT</version>

    <properties>
        <!--        <maven.compiler.source>8</maven.compiler.source>-->
        <!--        <maven.compiler.target>8</maven.compiler.target>-->
        <!--        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>-->
        <!--        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>-->
    </properties>


    <!--父工程引用-->
    <parent>
        <groupId>org.example</groupId>
        <artifactId>SpringCompleteStudyNotes</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <!--依赖引用-->
    <dependencies>


        <!--fastjson-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>

        <!--    链接mysql    -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>


        <!--使用 thymeleaf 模板引擎-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-commons</artifactId>
        </dependency>


        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>


        <!-- =========================================================       -->
        <!-- servlet 依赖. -->
        <!--        <dependency>-->
        <!--            <groupId>javax.servlet</groupId>-->
        <!--            <artifactId>javax.servlet-api</artifactId>-->
        <!--            <scope>provided</scope>-->
        <!--        </dependency>-->

        <!--
        JSTL（JSP Standard Tag Library，JSP 标准标签库)是一个不断完善的开放源代码的 JSP 标
        签库，是由 apache 的 jakarta 小组来维护的。JSTL 只能运行在支持 JSP1.2 和 Servlet2.3 规范的容器上，
        如 tomcat4.x。在 JSP 2.0 中也是作为标准支持的。
        不然报异常信息：
        javax.servlet.ServletException: Circular view path [/helloJsp]: would
        dispatch back to the current handler URL [/helloJsp] again. Check your ViewResolver
        setup! (Hint: This may be the result of an unspecified view, due to default view name
        generation.)
                -->
        <!--        <dependency>-->
        <!--            <groupId>javax.servlet</groupId>-->
        <!--            <artifactId>jstl</artifactId>-->
        <!--        </dependency>-->


        <!-- tomcat 的支持.-->
        <!--        <dependency>-->
        <!--            <groupId>org.springframework.boot</groupId>-->
        <!--            <artifactId>spring-boot-starter-tomcat</artifactId>-->
        <!--            <scope>provided</scope>-->
        <!--        </dependency>-->
        <!--        <dependency>-->
        <!--            <groupId>org.apache.tomcat.embed</groupId>-->
        <!--            <artifactId>tomcat-embed-jasper</artifactId>-->
        <!--            <scope>provided</scope>-->
        <!--        </dependency>-->


    </dependencies>
    <!--构建-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                                <version>1.3.3.RELEASE</version>
                <!--                &lt;!&ndash; 配置热部署 &ndash;&gt;-->
                <!--                <dependencies>-->
                <!--                    <dependency>-->
                <!--                        <groupId>org.springframework</groupId>-->
                <!--                        <artifactId>spring loaded</artifactId>-->
                <!--                        <version>1.2.4.RELEASE</version>-->
                <!--                    </dependency>-->
                <!--                </dependencies>-->

                <!--                <executions>-->
                <!--                    <execution>-->
                <!--                        <goals>-->
                <!--                            <goal>repackage</goal>-->
                <!--                        </goals>-->
                <!--                        <configuration>-->
                <!--                            <classifier>exec</classifier>-->
                <!--                        </configuration>-->
                <!--                    </execution>-->
                <!--                </executions>-->
            </plugin>
            <!--修改编译版本-->
            <!--            <plugin>-->
            <!--                <artifactId>maven-compiler-plugin</artifactId>-->
            <!--                <configuration>-->
            <!--                    <source>1.8</source>-->
            <!--                    <target>1.8</target>-->
            <!--                </configuration>-->
            <!--            </plugin>-->

        </plugins>
    </build>
</project>